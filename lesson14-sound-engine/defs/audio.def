.scope AUDIO
  CHANNEL_SQ1    = %00000001
  CHANNEL_SQ2    = %00000010
  CHANNEL_TRI    = %00000100
  CHANNEL_NOISE  = %00001000

  CHANNEL_SQ1_INDEX = $00
  CHANNEL_SQ2_INDEX = $01
  CHANNEL_TRI_INDEX = $02
  CHANNEL_NOISE_INDEX = $03

  INSTRUMENT_SILENCE = $FF
  NOTE_HI_CACHE_BUST = $FF

  APU_REGISTER_LIST = $4000

  SPEED_MASK = %00000111

  .scope OP_CODES
    SILENCE = $60
    STOP = $61
    LENGTH = $62
    LOOP = $63
  .endscope

  .struct Registers
    env     .byte
    sweep   .byte
    note_lo .byte
    note_hi .byte
  .endstruct

  ;; A Track is an assignment of APU channels
  ;; to an encoded audio stream.
  .struct Track
    channels_active .byte ;; channel mask
    audio_header    .addr ;; -> Stream
    decoders        .addr ;; -> Decoder addr list
  .endstruct

  .struct Stream
    channels .byte ;; lower nybble = mask of channels used
    spempo   .byte ;; Speed | Tempo
    ;; Instruments?
    ;; Patterns?
    ;; Frames?
    ;; Etc

    ch0      .addr ;; -> [encoded audio stream bytes...]
    ch1      .addr ;; -> [encoded audio stream bytes...]
    ch2      .addr ;; -> [encoded audio stream bytes...]
    ch3      .addr ;; -> [encoded audio stream bytes...]
  .endstruct

  ;; A decoder is an audio stream with current progress and a decoding fsm
  .struct Decoder
    stream_head  .addr    ;; -> audio start
    volume_head  .addr    ;; -> volume start
    registers    .tag Registers
    speed_tick   .byte ;; ssss-tttt , 4 bits of speed, and a 4 bit tick counter
                       ;; Speed is 0-7, equal to (# of ticks per tock) - 1
                       ;; The Tick counter is filled to Speed and decremented every tick.
                       ;; Notes are produced on counter rollover (a "tock"). 4 tocks make a beat when measuring BPM.
    length       .byte ;; Indicates total note length
                       ;; TODO: rename note_length
    elapsed      .byte ;; Indicates current note playtime. ;; Todo: axe
    remaining    .byte ;; Length-elapsed, indicates note left to play
                       ;; TODO: rename note_hold
    instrument   .byte ;; Index into instrument table

  ;;volume Upper 4 bits are index into instrument pattern!
    volume       .byte ;; Lower 4 bits are channel volume 0-F.
                       ;; Initialized to 0F
;    volume_hold  .byte ;; How many tocks before reading the volume stream again
                       ;; Most significant bit also acts as a mute bit
    ;; loop counter?
  .endstruct
.endscope
