.scope AUDIO
  CHANNEL_SQ1    = %00000001
  CHANNEL_SQ2    = %00000010
  CHANNEL_TRI    = %00000100
  CHANNEL_NOISE  = %00001000

  CHANNEL_SQ1_INDEX = $00
  CHANNEL_SQ2_INDEX = $01
  CHANNEL_TRI_INDEX = $02
  CHANNEL_NOISE_INDEX = $03

  INSTRUMENT_SILENCE = $FF
  NOTE_HI_CACHE_BUST = $FF

  APU_REGISTER_LIST = $4000

  SPEED_MASK = %00000111
  VOLUME_HOLD_FOREVER = $80

  .scope OP_CODES
    SILENCE = $60
    STOP = $61
    LENGTH = $62
    LOOP = $63
  .endscope

  .struct Registers
    env     .byte
    sweep   .byte
    note_lo .byte
    note_hi .byte
  .endstruct

  ;; A Track is an assignment of APU channels
  ;; to an encoded audio stream.
  .struct Track
    channels_active .byte ;; channel mask
    audio_header    .addr ;; -> Stream
    decoders        .addr ;; -> Decoder addr list
  .endstruct

  .struct Stream
    ;;TODO: size      .word ;; header size in bytes
    channels .byte ;; lower nybble = mask of channels used
    speed   .byte ;; Speed- 5 = 150BPM
    ;; Instruments?
    ;; Patterns?
    ;; Frames?
    ;; Etc

    ch0      .addr ;; -> [encoded audio stream bytes...]
    ch1      .addr ;; -> [encoded audio stream bytes...]
    ch2      .addr ;; -> [encoded audio stream bytes...]
    ch3      .addr ;; -> [encoded audio stream bytes...]

    vol0     .addr ;; -> [encoded volume stream bytes...]
    vol1     .addr ;; -> [encoded volume stream bytes...]
    vol2     .addr ;; -> [encoded volume stream bytes...]
    vol3     .addr ;; -> [encoded volume stream bytes...]
  .endstruct

  ;; A decoder is an audio stream with current progress and a decoding fsm
  .struct Decoder
    stream_head  .addr    ;; -> audio start
    volume_head  .addr    ;; -> volume start
    instrument_head .addr ;; -> instrument start
    registers    .tag Registers
    speed_x_tick    .byte ;; ssss-tttt , 4 bits of speed, and a 4 bit tick counter
                          ;; Speed is 0-7, equal to (# of ticks per tock) - 1
                          ;; The Tick counter is filled to Speed and decremented every tick.
                          ;; Notes are produced on counter rollover (a "tock"). 4 tocks make a beat when measuring BPM.
    length          .byte ;; Indicates total note length
                          ;; TODO: rename note_length
    remaining       .byte ;; Length-elapsed, indicates note left to play
                          ;; TODO: rename note_hold

    instr_x_volume  .byte ;; Upper 4 bits are offset into instrument head
                          ;; Lower 4 bits are channel volume 0-F.
                          ;; Initialized to 0F
    mute_x_hold_vol .byte ;; Upper bit is whether or not the stream is muted.
                          ;; Lower 7 bits are how many tocks to wait before reading the volume stream again
    ;; Just enough space for a loop counter if we ever want to add one
  .endstruct
.endscope
